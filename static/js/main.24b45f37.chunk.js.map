{"version":3,"sources":["ColorModeSwitcher.js","Navbar.js","Faq.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","toggleColorFlag","rest","firstUpdate","useRef","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","useEffect","current","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Navbar","align","boxShadow","p","mb","Faq","index","setIndex","direction","allowToggle","FAQ_LIST","map","faq","name","id","flex","textAlign","fontWeight","question","pb","answer","App","alanBtnInstance","useState","setToggleColorFlag","alanBtn","key","onCommand","commandData","command","scroller","scrollTo","faqId","duration","delay","smooth","flag","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24b45f37.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = ({ toggleColorFlag, ...rest }) => {\n  const firstUpdate = useRef(true);\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    toggleColorMode();\n  }, [toggleColorFlag]);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...rest}\n    />\n  );\n};\n","import React from 'react';\r\nimport { Box, Flex, Heading, Spacer } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\n\r\nexport const Navbar = ({ toggleColorFlag }) => {\r\n  return (\r\n    <Flex align=\"center\" boxShadow=\"base\" p=\"2\" mb=\"2\">\r\n      <Box p=\"2\">\r\n        <Heading size=\"lg\">E-commerce Support</Heading>\r\n      </Box>\r\n      <Spacer />\r\n      <Box>\r\n        <ColorModeSwitcher toggleColorFlag={toggleColorFlag} />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  AccordionIcon,\r\n} from '@chakra-ui/react';\r\nimport FAQ_LIST from './faq.json';\r\n\r\nexport const Faq = ({ index, setIndex }) => {\r\n  return (\r\n    <Flex direction=\"column\" p=\"4\">\r\n      <Box mb=\"8\">\r\n        <Heading size=\"md\">Frequently Asked Questions</Heading>\r\n      </Box>\r\n      <Accordion allowToggle index={index}>\r\n        {FAQ_LIST.map(faq => (\r\n          <AccordionItem key={faq.id} name={`accordion-item-${faq.id}`}>\r\n            <AccordionButton onClick={() => setIndex(faq.id - 1)}>\r\n              <Box flex=\"1\" textAlign=\"left\">\r\n                <Text fontWeight=\"semiBold\">{faq.question}</Text>\r\n              </Box>\r\n              <AccordionIcon />\r\n            </AccordionButton>\r\n            <AccordionPanel pb=\"4\">{faq.answer}</AccordionPanel>\r\n          </AccordionItem>\r\n        ))}\r\n      </Accordion>\r\n    </Flex>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { Navbar } from './Navbar';\nimport { Faq } from './Faq';\nimport alanBtn from '@alan-ai/alan-sdk-web';\nimport { scroller } from 'react-scroll';\n\nexport const App = () => {\n  const alanBtnInstance = useRef(null);\n  const [index, setIndex] = useState(null);\n  const [toggleColorFlag, setToggleColorFlag] = useState(false);\n\n  useEffect(() => {\n    if (!alanBtnInstance.current) {\n      alanBtnInstance.current = alanBtn({\n        key:\n          '087d51eef7bcfc08559b2d973be03f7f2e956eca572e1d8b807a3e2338fdd0dc/stage',\n        onCommand: commandData => {\n          if (commandData.command === 'gotoFaq') {\n            scroller.scrollTo(`accordion-item-${commandData.faqId}`, {\n              duration: 800,\n              delay: 0,\n              smooth: 'easeInOutQuart',\n            });\n            setIndex(commandData.faqId - 1);\n          } else if (commandData.command === 'toggleColorMode') {\n            setToggleColorFlag(flag => !flag);\n          }\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Navbar toggleColorFlag={toggleColorFlag} />\n      <Faq index={index} setIndex={setIndex} />\n    </ChakraProvider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}